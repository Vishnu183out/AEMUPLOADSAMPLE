"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
/*
Copyright 2019 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

var HttpResult = require('./http-result');

/**
 * Represents the results of the creation of a directory. These results contain information such as
 * the amount of time it took to create, and any error that may have occurred.
 */
var CreateDirectoryResult = /*#__PURE__*/function (_HttpResult) {
  _inherits(CreateDirectoryResult, _HttpResult);
  var _super = _createSuper(CreateDirectoryResult);
  /**
   * Constructs a new instance using the provided information. Can then be used to provide
   * additional details as needed.
   *
   * @param {object} options Options as provided when the upload instance was instantiated.
   * @param {DirectBinaryUploadOptions} uploadOptions Options as provided when the upload was
   *  initiated.
   * @param {string} folderPath Full path of the folder that was created.
   * @param {string} folderTitle Full title of the folder that was created.
   * @param {*} response Response to the create request from the underlying client.
   */
  function CreateDirectoryResult(options, uploadOptions, folderPath, folderTitle) {
    var _this;
    _classCallCheck(this, CreateDirectoryResult);
    _this = _super.call(this, options, uploadOptions);
    _this.folderPath = folderPath;
    _this.folderTitle = folderTitle;
    _this.response = false;
    _this.error = false;
    return _this;
  }

  /**
   * Sets the response to the create request.
   *
   * @param {*} response Response to the create request from the underlying client.
   */
  _createClass(CreateDirectoryResult, [{
    key: "setCreateResponse",
    value: function setCreateResponse(response) {
      this.response = response;
    }

    /**
     * Sets the error that was the result of the create request.
     *
     * @param {import('./upload-error')} error Error to the create request.
     */
  }, {
    key: "setCreateError",
    value: function setCreateError(error) {
      this.error = error;
    }

    /**
     * Retrieves the full path of the folder as it was created in AEM.
     *
     * @returns {string} Path of a folder.
     */
  }, {
    key: "getFolderPath",
    value: function getFolderPath() {
      return this.folderPath;
    }

    /**
     * Retrieves the title of the folder as it was created in AEM.
     *
     * @returns {string} Title of a folder.
     */
  }, {
    key: "getFolderTitle",
    value: function getFolderTitle() {
      return this.folderTitle;
    }

    /**
     * Retrieves the amount of time, in milliseconds, it took to create the folder.
     *
     * @returns {number} Time span in milliseconds.
     */
  }, {
    key: "getCreateTime",
    value: function getCreateTime() {
      if (this.response && this.response.cloudClient) {
        return this.response.cloudClient.requestTime;
      }
      return 0;
    }

    /**
     * Converts the result instance into a simple object containing all result data.
     *
     * @returns {object} Result data in a simple format.
     */
  }, {
    key: "toJSON",
    value: function toJSON() {
      var json = _objectSpread({
        elapsedTime: this.getCreateTime(),
        folderPath: this.getFolderPath(),
        folderTitle: this.getFolderTitle()
      }, _get(_getPrototypeOf(CreateDirectoryResult.prototype), "toJSON", this).call(this));
      if (this.error) {
        json.error = this.error.toJSON();
      }
      return json;
    }
  }]);
  return CreateDirectoryResult;
}(HttpResult);
module.exports = CreateDirectoryResult;