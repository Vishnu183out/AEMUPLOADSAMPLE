"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
/*
Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

var _require = require('./utils'),
  getAverage = _require.getAverage;
var UploadOptionsBase = require('./upload-options-base');
var FileUploadResults = /*#__PURE__*/function (_UploadOptionsBase) {
  _inherits(FileUploadResults, _UploadOptionsBase);
  var _super = _createSuper(FileUploadResults);
  /**
   * Constructs a new instance using the provided information.
   *
   * @param {object} options Options as provided when the direct binary object was instantiated.
   * @param {import('./direct-binary-upload-options')} uploadOptions Options as provided
   *  when the direct binary upload process was initiated.
   */
  function FileUploadResults(options, uploadOptions) {
    var _this;
    _classCallCheck(this, FileUploadResults);
    _this = _super.call(this, options, uploadOptions);
    _this.fileLookup = {};
    return _this;
  }

  /**
   * Retrieves the total number of files that were included in the upload.
   * @returns {number} File count.
   */
  _createClass(FileUploadResults, [{
    key: "getTotalFileCount",
    value: function getTotalFileCount() {
      return Object.keys(this.fileLookup).length;
    }

    /**
     * Sets the node-httptransfer options that were used to upload a given file.
     * @param {*} transferOptions Options for node-httptransfer.
     */
  }, {
    key: "addHttpTransferOptions",
    value: function addHttpTransferOptions(transferOptions) {
      var _this2 = this;
      transferOptions.uploadFiles.forEach(function (uploadFile) {
        var fileUrl = uploadFile.fileUrl;
        var targetPath = decodeURI(new URL(fileUrl).pathname);
        var fileInfo = _objectSpread({}, uploadFile);
        if (fileInfo.blob) {
          fileInfo.blob = '<provided>';
        }
        _this2.fileLookup[targetPath] = fileInfo;
      });
    }

    /**
     * Adds the result of a file transfer. Will be associated with the options
     * previously specified for a file through addHttpTransferOptions().
     * @param {*} data Event data as received from a node-httptransfer event.
     */
  }, {
    key: "addFileEventResult",
    value: function addFileEventResult(data) {
      var targetFile = data.targetFile;
      if (this.fileLookup[targetFile]) {
        this.fileLookup[targetFile].result = data;
      }
    }

    /**
     * Retrieves the total size, in bytes, of all files that were uploaded.
     * @returns {number} Size, in bytes.
     */
  }, {
    key: "getTotalSize",
    value: function getTotalSize() {
      var _this3 = this;
      return Object.keys(this.fileLookup).map(function (file) {
        return _this3.fileLookup[file].fileSize;
      }).reduce(function (a, b) {
        return a + b;
      });
    }

    /**
     * Retrieves the average size, in bytes, of all files that were
     * uploaded.
     * @returns {number} Size, in bytes.
     */
  }, {
    key: "getAverageSize",
    value: function getAverageSize() {
      var _this4 = this;
      return getAverage(Object.keys(this.fileLookup).map(function (file) {
        return _this4.fileLookup[file].fileSize;
      }));
    }

    /**
     * Retrieves the total number of files that uploaded successfully.
     * @returns {number} File count.
     */
  }, {
    key: "getSuccessCount",
    value: function getSuccessCount() {
      var _this5 = this;
      var count = 0;
      Object.keys(this.fileLookup).forEach(function (file) {
        var result = _this5.fileLookup[file].result;
        if (result) {
          var errors = result.errors;
          if (errors === undefined) {
            count += 1;
          }
        }
      });
      return count;
    }

    /**
     * Retrieves an array of _all_ errors that were encountered as
     * files were transferred.
     * @returns {Array} Array of error information.
     */
  }, {
    key: "getErrors",
    value: function getErrors() {
      var allErrors = [];
      Object.keys(this.fileLookup).forEach(function (file) {
        var result = file.result;
        if (result) {
          var _result$errors = result.errors,
            errors = _result$errors === void 0 ? [] : _result$errors;
          errors.forEach(function (error) {
            return allErrors.push(error);
          });
        }
      });
      return allErrors;
    }

    /**
     * Converts the result into a simple javascript object containing all
     * of the result's information.
     * @returns Simple object.
     */
  }, {
    key: "toJSON",
    value: function toJSON() {
      var _this6 = this;
      return Object.keys(this.fileLookup).map(function (path) {
        return _this6.fileLookup[path];
      });
    }
  }]);
  return FileUploadResults;
}(UploadOptionsBase);
module.exports = FileUploadResults;