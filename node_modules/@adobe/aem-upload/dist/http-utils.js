"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/*
Copyright 2019 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

var originalFetch = require('node-fetch');
var _require = require('@adobe/cloud-service-client'),
  fetchClient = _require.fetchClient;
var UploadFile = require('./upload-file');
var fetch = fetchClient(originalFetch, {
  handleCookies: true
});

/**
 * Submits an HTTP request using fetch, then provides the response.
 * @param {string} url HTTP URL to which request will be submitted.
 * @param {*} options Raw options that will be passed directly to fetch.
 * @returns {*} A fetch HTTP response.
 */
function submitRequest(url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return fetch(url, options);
}

/**
 * Converts options provided in a DirectBinaryUploadOptions instance to a format
 * suitable to pass to the httptransfer module.
 * @param {object} options General upload object options.
 * @param {import('./direct-binary-upload-options')} directBinaryUploadOptions Options
 *  to convert.
 */
function getHttpTransferOptions(options, directBinaryUploadOptions) {
  // the httptransfer module accepts a full fileUrl instead of a single
  // url with individual file names. if needed, convert the format with a
  // single url and individual file names to the fileUrl format.
  var convertedFiles = directBinaryUploadOptions.getUploadFiles().map(function (uploadFile) {
    var uploadFileInstance = new UploadFile(options, directBinaryUploadOptions, uploadFile);
    var transferOptions = uploadFileInstance.toJSON();
    if (uploadFile.blob) {
      // ensure blob is passed through to transfer options
      transferOptions.blob = uploadFile.blob;
    }
    return transferOptions;
  });
  var headers = {};
  var requestOptions = _objectSpread({}, directBinaryUploadOptions.getHttpOptions());
  if (requestOptions.headers) {
    // passing raw request options to node-httptransfer is somewhat limited because the
    // options will be used by init/complete requests to AEM, and inidividual part
    // transfers to blob storage. some options interfere with blob storage when included,
    // so removing headers here so that they won't be sent to blob storage.
    headers = _objectSpread({}, requestOptions.headers);
    delete requestOptions.headers;
  }
  var retryOptions = {
    retryInitialDelay: directBinaryUploadOptions.getHttpRetryDelay(),
    retryMaxCount: directBinaryUploadOptions.getHttpRetryCount(),
    retryAllErrors: false
  };
  if (requestOptions.cloudClient) {
    retryOptions.retryAllErrors = requestOptions.cloudClient.eventuallyConsistentCreate || false;
    delete requestOptions.cloudClient;
  }
  var transferOptions = {
    uploadFiles: convertedFiles,
    concurrent: directBinaryUploadOptions.isConcurrent(),
    maxConcurrent: directBinaryUploadOptions.getMaxConcurrent(),
    timeout: directBinaryUploadOptions.getHttpRequestTimeout(),
    headers: headers,
    requestOptions: _objectSpread({
      retryOptions: retryOptions
    }, requestOptions)
  };
  return transferOptions;
}
module.exports = {
  submitRequest: submitRequest,
  getHttpTransferOptions: getHttpTransferOptions
};