"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
/*
Copyright 2019 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

var HttpResult = require('./http-result');
var UploadError = require('./upload-error');

/**
 * Represents results for the upload process as a whole, which might include multiple files. Results
 * include information such as total upload time, total file size, total number of files, etc.
 */
var UploadResult = /*#__PURE__*/function (_HttpResult) {
  _inherits(UploadResult, _HttpResult);
  var _super = _createSuper(UploadResult);
  /**
   * Constructs a new instance of the results, which can be used to add more information.
   *
   * @param {object} options Options as provided when the upload instance was instantiated.
   * @param {DirectBinaryUploadOptions} uploadOptions Options as provided when the upload was
   *   initiated.
   */
  function UploadResult(options, uploadOptions) {
    var _this;
    _classCallCheck(this, UploadResult);
    _this = _super.call(this, options, uploadOptions);
    _this.totalTime = 0;
    _this.fileUploadResults = false;
    _this.createDirectoryResults = [];
    _this.errors = [];
    return _this;
  }

  /**
   * Starts a timer that will be used to calculate the total amount of time it takes for the
   * upload process to complete.
   */
  _createClass(UploadResult, [{
    key: "startTimer",
    value: function startTimer() {
      this.start = new Date().getTime();
    }

    /**
     * Stops the timer and calculates the amount of time elapsed since startTimer() was called.
     */
  }, {
    key: "stopTimer",
    value: function stopTimer() {
      if (this.start) {
        this.totalTime += new Date().getTime() - this.start;
      }
    }

    /**
     * Adds a new create directory to the overall result. Will be used to calculate various overall
     * metrics.
     *
     * @param {import('./create-directory-result')} createDirectoryResult Result whose
     *   metrics will be included in the overall result.
     */
  }, {
    key: "addCreateDirectoryResult",
    value: function addCreateDirectoryResult(createDirectoryResult) {
      this.createDirectoryResults.push(createDirectoryResult);
    }

    /**
     * Retrieves all results for directories that were created as part of the upload.
     *
     * @returns {Array<import('./create-directory-result')>} Directory results.
     */
  }, {
    key: "getCreateDirectoryResults",
    value: function getCreateDirectoryResults() {
      return this.createDirectoryResults;
    }

    /**
     * Retrieves the amount of time, in milliseconds, that it took to create any directories for the
     * upload.
     */
  }, {
    key: "getTotalFolderCreateTime",
    value: function getTotalFolderCreateTime() {
      var createTime = 0;
      this.getCreateDirectoryResults().forEach(function (directoryResult) {
        createTime += directoryResult.getCreateTime();
      });
      return createTime;
    }

    /**
     * Sets information the individual file upload results that will be included in the final
     * output.
     * @param {import('./file-upload-results')} fileUploadResults File upload information.
     */
  }, {
    key: "setFileUploadResults",
    value: function setFileUploadResults(fileUploadResults) {
      this.fileUploadResults = fileUploadResults;
    }

    /**
     * Retrieves the total number of files initially included in the overall upload.
     *
     * @returns {number} Number of files.
     */
  }, {
    key: "getTotalFiles",
    value: function getTotalFiles() {
      return this.fileUploadResults ? this.fileUploadResults.getTotalFileCount() : 0;
    }

    /**
     * Retrieves the number of files that uploaded successfully.
     *
     * @returns {number} Number of files.
     */
  }, {
    key: "getTotalCompletedFiles",
    value: function getTotalCompletedFiles() {
      return this.fileUploadResults ? this.fileUploadResults.getSuccessCount() : 0;
    }

    /**
     * Retrieves the total amount of time, in milliseconds, that elapsed between calls to
     * startTimer() and stopTimer().
     *
     * @returns {number} Time span in milliseconds.
     */
  }, {
    key: "getElapsedTime",
    value: function getElapsedTime() {
      return this.totalTime;
    }

    /**
     * Sets the total amount of time, in milliseconds, that it took for the upload to complete.
     *
     * @param {number} totalTime Time span in milliseconds.
     */
  }, {
    key: "setElapsedTime",
    value: function setElapsedTime(totalTime) {
      this.totalTime = totalTime;
    }

    /**
     * Retrieves the total size, in bytes, of all files initially provided to the upload process.
     *
     * @returns {number} Size in bytes.
     */
  }, {
    key: "getTotalSize",
    value: function getTotalSize() {
      return this.fileUploadResults ? this.fileUploadResults.getTotalSize() : 0;
    }

    /**
     * Retrieves the average size, in bytes, of all files initially provided to the upload process.
     *
     * @returns {number} Size in bytes.
     */
  }, {
    key: "getAverageFileSize",
    value: function getAverageFileSize() {
      return this.fileUploadResults ? this.fileUploadResults.getAverageSize() : 0;
    }

    /**
     * Retrieves all the individual file upload results contained in the overall result.
     *
     * @returns {Array} List of file event infos.
     */
  }, {
    key: "getFileUploadResults",
    value: function getFileUploadResults() {
      return this.fileUploadResults ? this.fileUploadResults.toJSON() : [];
    }

    /**
     * Retrieves all the errors that occurred in the transfer process.
     *
     * @returns {Array} List of UploadError instances.
     */
  }, {
    key: "getErrors",
    value: function getErrors() {
      var errors = _toConsumableArray(this.getUploadErrors());
      var fileErrors = this.fileUploadResults ? this.fileUploadResults.getErrors() : [];
      return errors.concat(fileErrors);
    }

    /**
     * Adds a high-level error that prevented the upload from completing.
     *
     * @param {*} e An error object.
     */
  }, {
    key: "addUploadError",
    value: function addUploadError(e) {
      this.errors.push(UploadError.fromError(e));
    }

    /**
     * Retrieves a list of high-level errors that prevented the upload from
     * completing.
     *
     * @returns {Array} An array of error objects.
     */
  }, {
    key: "getUploadErrors",
    value: function getUploadErrors() {
      return this.errors;
    }

    /**
     * Converts the result instance into a simple object containing all result data.
     *
     * @returns {object} Result data in a simple format.
     */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return _objectSpread({
        host: this.getUploadOptions().getUrlPrefix(),
        totalFiles: this.getTotalFiles(),
        totalTime: this.getElapsedTime(),
        totalCompleted: this.getTotalCompletedFiles(),
        totalFileSize: this.getTotalSize(),
        folderCreateSpent: this.getTotalFolderCreateTime(),
        createdFolders: this.getCreateDirectoryResults().map(function (result) {
          return result.toJSON();
        }),
        detailedResult: this.fileUploadResults ? this.fileUploadResults.toJSON() : [],
        errors: this.getUploadErrors().map(function (error) {
          return error.toJSON();
        })
      }, _get(_getPrototypeOf(UploadResult.prototype), "toJSON", this).call(this));
    }
  }]);
  return UploadResult;
}(HttpResult);
module.exports = UploadResult;