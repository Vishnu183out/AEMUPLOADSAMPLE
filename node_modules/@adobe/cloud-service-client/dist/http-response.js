"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
/*
Copyright 2021 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

var _require = require("./http-utils"),
  redactHeaders = _require.redactHeaders;

// private methods
var PRIVATE = Symbol("PRIVATE");
var _extend = Symbol("_extend");

/**
 * Represents a response received from the HttpClient after submitting a request. Provides
 * various accessors for retrieving information from the response.
 */
var HttpResponse = /*#__PURE__*/function () {
  /**
   * Constructs a new response.
   *
   * @param {*} rawResponse Raw response on which the client's response is
   *  based.
   * @param {*} [error] If provided, an error that will be associated with
   *  the response.
   */
  function HttpResponse(rawResponse) {
    var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    _classCallCheck(this, HttpResponse);
    this[PRIVATE] = {
      rawResponse: rawResponse,
      error: error
    };
  }

  /**
   * Retrieves the status code of the response.
   *
   * @returns {number} HTTP status code.
   */
  _createClass(HttpResponse, [{
    key: "getStatus",
    value: function getStatus() {
      var rawResponse = this[PRIVATE].rawResponse;
      return rawResponse.status;
    }

    /**
     * Retrieves the headers of the response. The return value should be a simple
     * object whose keys are header names and whose values are header values.
     *
     * @returns {*} The response's headers.
     */
  }, {
    key: "getHeaders",
    value: function getHeaders() {
      var rawResponse = this[PRIVATE].rawResponse;
      return rawResponse.headers;
    }

    /**
     * Retrieves the status text of the response.
     *
     * @returns {string} HTTP status text;
     */
  }, {
    key: "getStatusText",
    value: function getStatusText() {
      var rawResponse = this[PRIVATE].rawResponse;
      return rawResponse.statusText;
    }

    /**
     * Retrieves the raw response from the underlying HTTP backend, as-is.
     *
     * @returns {*} Raw response of the underlying HTTP backend.
     */
  }, {
    key: "getRawResponse",
    value: function getRawResponse() {
      var rawResponse = this[PRIVATE].rawResponse;
      return rawResponse;
    }

    /**
     * Sets the amount of time, in milliseconds, that it took for the underlying
     * HTTP library to submit the request and get a response.
     *
     * @param {number} requestTime Time span in milliseconds.
     */
  }, {
    key: "setRequestTime",
    value: function setRequestTime(requestTime) {
      this[PRIVATE].requestTime = requestTime;
    }

    /**
     * Converts the client's HTTP response into the raw result that was provided by the
     * underlying HTTP library. The result could be various things, such as an HTTP
     * response or a javascript error. No matter the result, it will have been
     * extended with the additional information provided by the client.
     *
     * @param {object} clientInfo Simple object containing information that should be
     *  included in the cloudClient property that will be added to the response.
     * @returns {*} The final result to provide to the client's consumer.
     */
  }, {
    key: "toClientResponse",
    value: function toClientResponse(clientInfo) {
      var _this$PRIVATE = this[PRIVATE],
        rawResponse = _this$PRIVATE.rawResponse,
        error = _this$PRIVATE.error;
      this[_extend](rawResponse, clientInfo);
      if (error) {
        this[_extend](error, clientInfo);
        // if the response generated an error when sent with then underlying backend,
        // throw that error now
        throw error;
      }

      // an error was not thrown by the underlying backend, return the response that
      // it provided
      return rawResponse;
    }

    /**
     * Converts the response to a readable JSON format, with fewer properties. In particular,
     * the JSON won't contain information about the request that generated the response.
     *
     * @returns {object} Response values as JSON.
     */
  }, {
    key: "toJSON",
    value: function toJSON() {
      var _this$PRIVATE2 = this[PRIVATE],
        error = _this$PRIVATE2.error,
        requestTime = _this$PRIVATE2.requestTime;
      var status = this.getStatus();
      var statusText = this.getStatusText();
      var headers = this.getHeaders();
      var json = {};
      if (headers) {
        json.headers = redactHeaders(headers);
      }
      if (status) {
        json.status = status;
      }
      if (statusText) {
        json.statusText = statusText;
      }
      if (requestTime !== undefined) {
        json.requestTime = requestTime;
      }
      if (error) {
        if (error.name || error.message) {
          var errorInfo = {};
          if (error.name) {
            errorInfo.name = error.name;
          }
          if (error.message) {
            errorInfo.message = error.message;
          }
          json.error = errorInfo;
        } else {
          json.error = error;
        }
      }
      return json;
    }

    /**
     * Returns a stringified version of the response's JSON.
     *
     * @returns {string} Stringified JSON.
     */
  }, {
    key: "toString",
    value: function toString() {
      return JSON.stringify(this.toJSON(), null, 2);
    }

    /**
     * Does the work of extending a target with additional information provided
     * by the client.
     *
     * @param {*} toExtend The item that will be extended with more properties.
     * @param {*} clientInfo Additional information to include on the response's
     *  cloudClient property.
     */
  }, {
    key: _extend,
    value: function value(toExtend, clientInfo) {
      toExtend.cloudClient = _objectSpread(_objectSpread({}, clientInfo), this.toJSON());
    }
  }]);
  return HttpResponse;
}();
module.exports = HttpResponse;