"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
/*
Copyright 2021 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

var LEVEL = process.env.NODE_HTTP_CLIENT_LOG_LEVEL;

// private methods
var _consoleLog = Symbol("_consoleLog");

/**
 * Logger that writes formatted message information to the console.
 */
var Logger = /*#__PURE__*/function () {
  function Logger() {
    _classCallCheck(this, Logger);
  }
  _createClass(Logger, [{
    key: "debug",
    value:
    /**
     * Logs a message at the debug level. The default logger will log this message to
     * the console, but only when the NODE_HTTP_CLIENT_LOG_LEVEL environment variable
     * is set to DEBUG.
     *
     * All arguments supplied to the method will be passed through to console.log.
     *
     * @param {Array<any>} theArguments Arguments to pass to console.log().
     */
    function debug() {
      for (var _len = arguments.length, theArguments = new Array(_len), _key = 0; _key < _len; _key++) {
        theArguments[_key] = arguments[_key];
      }
      this[_consoleLog]("DEBUG", theArguments, ["DEBUG"]);
    }

    /**
     * Logs a message at the info level. The default logger will log this message to
     * the console, but only when the NODE_HTTP_CLIENT_LOG_LEVEL environment variable
     * is set to DEBUG or INFO.
     *
     * All arguments supplied to the method will be passed through to console.log.
     *
     * @param {Array<any>} theArguments Arguments to pass to console.log().
     */
  }, {
    key: "info",
    value: function info() {
      for (var _len2 = arguments.length, theArguments = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        theArguments[_key2] = arguments[_key2];
      }
      this[_consoleLog]("INFO", theArguments, ["DEBUG", "INFO"]);
    }

    /**
     * Logs a message at the warn level. The default logger will log this message to
     * the console, but only when the NODE_HTTP_CLIENT_LOG_LEVEL environment variable
     * is set to DEBUG, INFO, or WARN.
     *
     * All arguments supplied to the method will be passed through to console.log.
     *
     * @param {Array<any>} theArguments Arguments to pass to console.log().
     */
  }, {
    key: "warn",
    value: function warn() {
      for (var _len3 = arguments.length, theArguments = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        theArguments[_key3] = arguments[_key3];
      }
      this[_consoleLog]("WARN", theArguments, ["DEBUG", "INFO", "WARN"]);
    }

    /**
     * Logs a message at the error level. The default logger will log this message to
     * the console, but only when the NODE_HTTP_CLIENT_LOG_LEVEL environment variable
     * is set to DEBUG, INFO, WARN, or ERROR.
     *
     * All arguments supplied to the method will be passed through to console.log.
     *
     * @param {Array<any>} theArguments Arguments to pass to console.log().
     */
  }, {
    key: "error",
    value: function error() {
      for (var _len4 = arguments.length, theArguments = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        theArguments[_key4] = arguments[_key4];
      }
      this[_consoleLog]("ERROR", theArguments, ["DEBUG", "INFO", "WARN", "ERROR"]);
    }

    /**
     * Uses console.log() to write a message at the given level.
     *
     * @param {string} level Log level to include in the message.
     * @param {Array} theArguments All arguments that should be included in the call
     *  to console.log().
     * @param {Array} outputLevels Will only log the message if the log level is set
     *  to one of the values in this array.
     */
  }, {
    key: _consoleLog,
    value: function value(level, theArguments, outputLevels) {
      if (outputLevels.includes(LEVEL)) {
        console.log.apply(undefined, Logger.prependToMessage("".concat(new Date().toISOString(), " ").concat(level, ": "), theArguments));
      }
    }
  }], [{
    key: "prependToMessage",
    value:
    /**
     * Prepends a given value to a log message, which is assumed to be the first item
     * in an array of arguments to a log function.
     *
     * @param {string} toPrepend Value to prepend.
     * @param {Array} logArgs Array of arguments intended for a log function.
     * @returns {Array} Modified set of log arguments.
     */
    function prependToMessage(toPrepend, logArgs) {
      var argsCopy = _toConsumableArray(logArgs);
      var prependedMessage = "".concat(toPrepend).concat(argsCopy[0]);
      argsCopy.splice(0, 1, prependedMessage);
      return argsCopy;
    }
  }]);
  return Logger;
}();
module.exports = Logger;