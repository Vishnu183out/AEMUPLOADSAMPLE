/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
const {
  getFileStats,
  isPositiveNumber
} = require('./util');
const {
  uploadFile
} = require('./file');
const filterObject = require('filter-obj');
const {
  IllegalArgumentError
} = require('./error');
const logger = require('./logger');

/**
 * @typedef {Object} UploadAEMMultipartOptions
 *
 * @property {String} [method] Optional HTTP method (defaults to 'PUT')
 * @property {Number} [timeout] Optional socket timeout
 * @property {Object} [headers] Optional override of request headers
 * @property {Number} [partSize] Optional custom preferred part size. Might be adjusted depending on the target.
 * @property {Number} [retryMax=60000] time to retry until throwing an error (ms)
 * @property {Number} [retryInterval=100] time between retries, used by exponential backoff (ms)
 * @property {Boolean} [retryEnabled=true] retry on failure enabled
 * @property {Boolean} [retryAllErrors=false] whether or not to retry on all http error codes or just >=500
 */
/**
 * @typedef {Object} UploadAEMMultipartTarget
 *
 * @property {String[]} urls URLs
 * @property {Number} [maxPartSize] Maximum size of each part
 */
/**
 * Upload a file in multiple parts to a set of URLs.
 * Intended to be used with AEM/Oak, see for more information:
 * http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/api/binary/BinaryUpload.html
 *
 * @param {String} filepath Source file path
 * @param {UploadAEMMultipartTarget} target Target urls
 * @param {UploadAEMMultipartOptions} [options] Upload options
 * @returns {Promise} resolves when upload completes
 */
function uploadAEMMultipartFile(_x, _x2, _x3) {
  return _uploadAEMMultipartFile.apply(this, arguments);
}
function _uploadAEMMultipartFile() {
  _uploadAEMMultipartFile = _asyncToGenerator(function* (filepath, target, options) {
    if (!target) {
      throw new IllegalArgumentError('target not provided', target);
    } else if (!target.urls || target.urls.length === 0) {
      throw new IllegalArgumentError('\'target.urls\' but be a non-empty array', target.urls);
    } else if (!isPositiveNumber(target.maxPartSize)) {
      throw new IllegalArgumentError('\'target.maxPartSize\' must be a positive number', target.maxPartSize);
    }

    // Calculate the partSize based on the number of urls
    const {
      size
    } = yield getFileStats(filepath);
    let partSize = Math.ceil(size / target.urls.length);

    // Make sure that the file is not too large
    if (partSize > target.maxPartSize) {
      throw Error(`File '${filepath}' is too large to upload: ${size} bytes, maxPartSize: ${target.maxPartSize} bytes, numUploadURIs: ${target.urls.length}`);
    }

    // Default to the maxPartSize
    partSize = target.maxPartSize;
    logger.debug('part size:', partSize);

    // extract upload options
    const uploadOptions = filterObject(options || {}, ['method', 'timeout', 'headers', 'retryMaxDuration', 'retryInterval', 'retryEnabled', 'retryAllErrors']);

    // upload blocks
    // rely on retry functionality in uploadFile
    let i = 0;
    let start = 0;
    while (start < size) {
      // uploadFile expects an inclusive start and end which is why the -1 is required
      const length = Math.min(size - start, partSize);
      yield uploadFile(filepath, target.urls[i], _objectSpread(_objectSpread({}, uploadOptions), {}, {
        start,
        end: start + length - 1
      }));
      start += length;
      ++i;
    }
  });
  return _uploadAEMMultipartFile.apply(this, arguments);
}
module.exports = {
  uploadAEMMultipartFile
};