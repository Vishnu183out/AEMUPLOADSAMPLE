/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const FormData = require("form-data");
const {
  HttpRequestGenerator
} = require("../asset/httprequestgenerator");
const {
  HTTP
} = require("../constants");
const FILE_OFFSET = "file@Offset";
const CHUNK_LENGTH = "chunk@Length";
const FILE_LENGTH = "file@Length";
const FILE = "file";
const CHARSET = "_charset_";
const UTF8 = "utf-8";
const CHUNKED_CONTENT_TYPE = "x-chunked-content-type";
const CHUNKED_TOTAL_SIZE = "x-chunked-total-size";
/**
 * Helps create portions of the HTTP requests that will be sent when transferring
 * an asset using the create asset servlet.
 */
class CreateAssetServletRequestGenerator extends HttpRequestGenerator {
  createPartHttpBody(partInfo) {
    const {
      partData,
      contentRange,
      transferPart
    } = partInfo;
    // create asset servlet uses a form to upload data
    const form = new FormData();
    form.append(CHARSET, UTF8);
    if (this.isPartChunked(transferPart.totalSize, contentRange)) {
      // this is a chunk of the file - add more information to form
      const {
        low,
        length
      } = contentRange || {};
      console.log(`Create asset servlet upload process adding form elements file@Offset=${low}, chunk@Length=${length}, file@Length=${transferPart.totalSize}`);
      form.append(FILE_OFFSET, low);
      form.append(CHUNK_LENGTH, length);
      form.append(FILE_LENGTH, transferPart.totalSize);
    }
    form.append(FILE, partData, {
      filename: transferPart.targetName,
      [HTTP.HEADER.CONTENT_TYPE]: transferPart.contentType
    });
    return form;
  }
  createPartHttpHeaders(partInfo) {
    const {
      httpBody,
      contentRange,
      transferPart
    } = partInfo;
    const headers = _objectSpread({}, httpBody.getHeaders());
    if (this.isPartChunked(transferPart.totalSize, contentRange)) {
      // add more information if the asset is being transferred in chunks
      headers[CHUNKED_CONTENT_TYPE] = transferPart.contentType;
      headers[CHUNKED_TOTAL_SIZE] = transferPart.totalSize;
    }
    return headers;
  }

  /**
   * Given a content range, determine if the part represents a chunk of
   * an asset.
   * @param {number} totalSize Total size of the asset, in bytes.
   * @param {import('DRange').SubRange} contentRange Range whose information will
   *  be used.
   * @returns {boolean} True if the part is a chunk of a file, false
   *  otherwise.
   */
  isPartChunked(totalSize, contentRange) {
    const {
      high,
      length
    } = contentRange || {};
    return high && totalSize && length && length < totalSize;
  }
}
module.exports = {
  CreateAssetServletRequestGenerator
};