/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

'use strict';

require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.symbol.async-iterator.js");
require("core-js/modules/es.symbol.match-all.js");
require("core-js/modules/es.aggregate-error.js");
require("core-js/modules/es.array.flat.js");
require("core-js/modules/es.array.flat-map.js");
require("core-js/modules/es.array.includes.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.sort.js");
require("core-js/modules/es.array.unscopables.flat.js");
require("core-js/modules/es.array.unscopables.flat-map.js");
require("core-js/modules/es.global-this.js");
require("core-js/modules/es.json.stringify.js");
require("core-js/modules/es.math.acosh.js");
require("core-js/modules/es.math.hypot.js");
require("core-js/modules/es.object.define-getter.js");
require("core-js/modules/es.object.define-setter.js");
require("core-js/modules/es.object.entries.js");
require("core-js/modules/es.object.from-entries.js");
require("core-js/modules/es.object.get-own-property-descriptors.js");
require("core-js/modules/es.object.lookup-getter.js");
require("core-js/modules/es.object.lookup-setter.js");
require("core-js/modules/es.object.values.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.promise.all-settled.js");
require("core-js/modules/es.promise.any.js");
require("core-js/modules/es.promise.finally.js");
require("core-js/modules/es.reflect.to-string-tag.js");
require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.regexp.flags.js");
require("core-js/modules/es.string.match-all.js");
require("core-js/modules/es.string.pad-end.js");
require("core-js/modules/es.string.pad-start.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.string.replace-all.js");
require("core-js/modules/es.string.split.js");
require("core-js/modules/es.string.trim.js");
require("core-js/modules/es.string.trim-end.js");
require("core-js/modules/es.string.trim-start.js");
require("core-js/modules/es.typed-array.float32-array.js");
require("core-js/modules/es.typed-array.float64-array.js");
require("core-js/modules/es.typed-array.int8-array.js");
require("core-js/modules/es.typed-array.int16-array.js");
require("core-js/modules/es.typed-array.int32-array.js");
require("core-js/modules/es.typed-array.uint8-array.js");
require("core-js/modules/es.typed-array.uint8-clamped-array.js");
require("core-js/modules/es.typed-array.uint16-array.js");
require("core-js/modules/es.typed-array.uint32-array.js");
require("core-js/modules/es.typed-array.fill.js");
require("core-js/modules/es.typed-array.from.js");
require("core-js/modules/es.typed-array.of.js");
require("core-js/modules/es.typed-array.set.js");
require("core-js/modules/es.typed-array.sort.js");
require("core-js/modules/web.queue-microtask.js");
require("core-js/modules/web.url.js");
require("core-js/modules/web.url.to-json.js");
require("core-js/modules/web.url-search-params.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const {
  AEMBinaryUpload
} = require("./aembinaryupload");
const {
  AssetMetadata
} = require("../asset/assetmetadata");
const {
  NameConflictPolicy
} = require("../asset/nameconflictpolicy");
const {
  AEMInitiateUpload
} = require("../functions/aeminitiateupload");
const {
  TransferController,
  TransferEvents
} = require("../controller/transfercontroller");
const {
  AEMCompleteUpload
} = require("../functions/aemcompleteupload");
const {
  CreateTransferParts
} = require("../functions/transferpartscreate");
const {
  JoinTransferParts
} = require("../functions/transferpartsjoin");
const {
  FailUnsupportedAssets
} = require("../functions/failunsupportedassets");
const {
  CloseFiles
} = require("../functions/closefiles");
const {
  MapConcurrent
} = require("../generator/mapconcurrent");
const {
  Transfer
} = require("../functions/transfer");
const {
  BlockRequestGenerator
} = require("../asset/blockrequestgenerator");
const {
  filterToRetryOptions
} = require("../retry");
const ErrorCodes = require("../http-error-codes");
const MAX_RETRY_COUNT = 5;

/**
 * A transfer process that uses AEM's direct binary upload algorithm to upload assets
 * to an AEM instance.
 */
class DirectBinaryUpload extends AEMBinaryUpload {
  /**
   * Retrieves the options that will be used for the library's transfer
   * process.
   * @returns {import("../functions/transfer").TransferOptions} Transfer process options.
   */
  getTransferOptions() {
    const {
      requestOptions = {}
    } = this.getOptions();
    const {
      retryOptions = {}
    } = requestOptions;
    // confirm only expected retry options are used
    const filteredRetryOptions = filterToRetryOptions(retryOptions);
    return _objectSpread({
      retryMaxCount: MAX_RETRY_COUNT,
      requestOptions
    }, filteredRetryOptions);
  }

  /**
   * Builds the TransferAsset options for a given upload file.
   * @param {import('./typedefs').UploadFile} uploadFile File whose options should
   *  be created.
   * @returns {import('../asset/transferasset').TransferAssetOptions} Transfer options
   *  to use for the file.
   */
  getTransferAssetOptions(uploadFile) {
    return {
      acceptRanges: true,
      metadata: new AssetMetadata(uploadFile.filePath, undefined, uploadFile.fileSize),
      nameConflictPolicy: new NameConflictPolicy({
        createVersion: uploadFile.createVersion,
        versionLabel: uploadFile.versionLabel,
        versionComment: uploadFile.versionComment,
        replace: uploadFile.replace
      })
    };
  }

  /**
   * Retrieves the preferred part size for the upload process. Note that the return
   * value might be undefined.
   * @returns {number} Preferred part size, or undefined if none specified.
   */
  getPreferredPartSize() {
    return this.getOptions().preferredPartSize;
  }

  /**
   * Retrieves the maximum number of concurrent uploads allowed by the upload process.
   * @returns {number} Number of max uploads.
   */
  getMaxConcurrent() {
    const options = this.getOptions();
    return options.concurrent && options.maxConcurrent || 1;
  }

  /**
   * Retrieves the pipeline steps that should be executed to accomplish the binary
   * upload.
   * @param {import('../randomfileaccess').RandomFileAccess} randomFileAccess File
   *  access instance that can be used for working with files.
   * @returns {Array<import('../generator/function')>} Steps to execute in a
   *  pipeline.
   */
  getPipelineSteps(randomFileAccess) {
    const transferOptions = this.getTransferOptions();
    const requestGenerator = new BlockRequestGenerator();
    return [new FailUnsupportedAssets(), new MapConcurrent(new AEMInitiateUpload(transferOptions), {
      maxBatchLength: 100
    }), new CreateTransferParts({
      preferredPartSize: this.getPreferredPartSize()
    }), new MapConcurrent(new Transfer(randomFileAccess, requestGenerator, transferOptions), {
      maxConcurrent: this.getMaxConcurrent()
    }), new JoinTransferParts(), new CloseFiles(randomFileAccess), new MapConcurrent(new AEMCompleteUpload(transferOptions))];
  }

  /**
   * Retrieves the name of the transfer event that should be used to indicate that
   * a file has started transferring.
   * @returns {string} An event name.
   */
  getFileStartEventName() {
    return TransferEvents.AEM_INITIATE_UPLOAD;
  }

  /**
   * Retrieves the name of the transfer event that should be used to indicate that
   * a file has finished transferring.
   * @returns {string} An event name.
   */
  getFileEndEventName() {
    return TransferEvents.AFTER_AEM_COMPLETE_UPLOAD;
  }

  /**
   * Determines whether the AEM isntance that is the target of the upload has direct
   * binary access enabled. This will help decide which upload algorithm to use.
   * @param {import('typedefs').AEMUploadOptions} options Options being used to drive the upload.
   * @returns {Promise<booleam>} True if direct binary access is enabled, false
   *  otherwise.
   */
  static isDirectBinaryAccessEnabled(options) {
    return _asyncToGenerator(function* () {
      return new Promise((res, rej) => {
        const controller = new TransferController();
        controller.on(TransferEvents.AFTER_AEM_INITIATE_UPLOAD, () => {
          // this event means that the initiate was successful - direct
          // binary access is support
          res(true);
        });
        controller.on(TransferEvents.ERROR, transferEvent => {
          try {
            // ther was an error in the initiate, check to see if the error
            // indicates direct binary access isn't enabled
            if (transferEvent.props.firstError) {
              if (transferEvent.error.code === ErrorCodes.NOT_SUPPORTED) {
                res(false);
                return;
              }
            }
            // default to true to avoid swallowing errors that downstream processes
            // may handle better
            res(true);
          } catch (e) {
            rej(e);
          }
        });
        try {
          const binaryUpload = new DirectBinaryUpload(options);
          const transferAssets = binaryUpload.generateAEMUploadTransferRecords();
          const assets = [];
          // use the first asset in the list of files to submit an initiate upload call,
          // which can help determine whether direct binary access is enabled.
          for (const transferAsset of transferAssets) {
            assets.push(transferAsset);
            break;
          }
          if (assets.length > 0) {
            const initiateUpload = new AEMInitiateUpload(binaryUpload.getTransferOptions());
            const result = initiateUpload.execute(assets, controller);
            result.next();
          } else {
            // if no assets were provided, continue as if direct binary access is
            // enabled and rely on downstream processes to handle the error
            res(true);
          }
        } catch (e) {
          rej(e);
        }
      });
    })();
  }
}
module.exports = {
  DirectBinaryUpload
};