/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

"use strict";

require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.symbol.async-iterator.js");
require("core-js/modules/es.symbol.match-all.js");
require("core-js/modules/es.aggregate-error.js");
require("core-js/modules/es.array.flat.js");
require("core-js/modules/es.array.flat-map.js");
require("core-js/modules/es.array.includes.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.sort.js");
require("core-js/modules/es.array.unscopables.flat.js");
require("core-js/modules/es.array.unscopables.flat-map.js");
require("core-js/modules/es.global-this.js");
require("core-js/modules/es.json.stringify.js");
require("core-js/modules/es.math.acosh.js");
require("core-js/modules/es.math.hypot.js");
require("core-js/modules/es.object.define-getter.js");
require("core-js/modules/es.object.define-setter.js");
require("core-js/modules/es.object.entries.js");
require("core-js/modules/es.object.from-entries.js");
require("core-js/modules/es.object.get-own-property-descriptors.js");
require("core-js/modules/es.object.lookup-getter.js");
require("core-js/modules/es.object.lookup-setter.js");
require("core-js/modules/es.object.values.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.promise.all-settled.js");
require("core-js/modules/es.promise.any.js");
require("core-js/modules/es.promise.finally.js");
require("core-js/modules/es.reflect.to-string-tag.js");
require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.regexp.flags.js");
require("core-js/modules/es.string.match-all.js");
require("core-js/modules/es.string.pad-end.js");
require("core-js/modules/es.string.pad-start.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.string.replace-all.js");
require("core-js/modules/es.string.split.js");
require("core-js/modules/es.string.trim.js");
require("core-js/modules/es.string.trim-end.js");
require("core-js/modules/es.string.trim-start.js");
require("core-js/modules/es.typed-array.float32-array.js");
require("core-js/modules/es.typed-array.float64-array.js");
require("core-js/modules/es.typed-array.int8-array.js");
require("core-js/modules/es.typed-array.int16-array.js");
require("core-js/modules/es.typed-array.int32-array.js");
require("core-js/modules/es.typed-array.uint8-array.js");
require("core-js/modules/es.typed-array.uint8-clamped-array.js");
require("core-js/modules/es.typed-array.uint16-array.js");
require("core-js/modules/es.typed-array.uint32-array.js");
require("core-js/modules/es.typed-array.fill.js");
require("core-js/modules/es.typed-array.from.js");
require("core-js/modules/es.typed-array.of.js");
require("core-js/modules/es.typed-array.set.js");
require("core-js/modules/es.typed-array.sort.js");
require("core-js/modules/web.queue-microtask.js");
require("core-js/modules/web.url.js");
require("core-js/modules/web.url.to-json.js");
require("core-js/modules/web.url-search-params.js");
const {
  IllegalArgumentError
} = require("../error");
const {
  isPositiveNumber,
  isValidWebUrl
} = require("../util");
const PRIVATE = Symbol("PRIVATE");

/**
 * @typedef {Object} Headers
 */
/**
 * Describes multi-part target, allowing the asset can be uploaded in parts/blocks.
 * 
 * This is supported in the AEM upload API as well as Azure and AWS.
 */
class AssetMultipart {
  /**
   * Construct a source or target asset
   * 
   * @param {URL[]} targetUrls Target urls to upload parts
   * @param {Number} minPartSize Minimum part size
   * @param {Number} maxPartSize Maximum part size
   * @param {Headers} [headers] Optional headers to upload to the given target urls
   * @param {URL} [completeUrl] AEM complete upload url
   * @param {String} [uploadToken] Upload token used by AEM complete upload
   */
  constructor(targetUrls, minPartSize, maxPartSize, headers, completeUrl, uploadToken) {
    if (!Array.isArray(targetUrls) || targetUrls.length === 0) {
      throw new IllegalArgumentError("'targetUrls' must be a non-empty array", targetUrls);
    } else if (!isPositiveNumber(minPartSize)) {
      throw new IllegalArgumentError("'minPartSize' must be a positive number", minPartSize);
    } else if (!isPositiveNumber(maxPartSize) || maxPartSize < minPartSize) {
      throw new IllegalArgumentError(`'maxPartSize' must be larger or equal to 'minPartSize' (minPartSize=${minPartSize})`, maxPartSize);
    } else if (completeUrl && !isValidWebUrl(completeUrl)) {
      throw new IllegalArgumentError("'completeUrl' must be a http/https url", completeUrl);
    }
    this[PRIVATE] = {
      targetUrls,
      minPartSize,
      maxPartSize,
      headers,
      completeUrl: completeUrl && new URL(completeUrl),
      uploadToken
    };
  }

  /**
   * Target urls
   * 
   * @returns {URL[]} Target urls to upload parts
   */
  get targetUrls() {
    return this[PRIVATE].targetUrls;
  }

  /**
   * Minimum part size
   * 
   * @returns {Number} Minimum part size
   */
  get minPartSize() {
    return this[PRIVATE].minPartSize;
  }

  /**
   * Maximum part size
   * 
   * @returns {Number} Minimum part size
   */
  get maxPartSize() {
    return this[PRIVATE].maxPartSize;
  }

  /**
   * Optional headers to use to upload the asset to the urls
   */
  get headers() {
    return this[PRIVATE].headers;
  }

  /**
   * AEM complete upload URL after upload has finished
   * 
   * @returns {URL} Completion URL
   */
  get completeUrl() {
    return this[PRIVATE].completeUrl;
  }

  /**
   * Upload token used by AEM complete upload
   * 
   * @returns {String} Upload token
   */
  get uploadToken() {
    return this[PRIVATE].uploadToken;
  }
}
module.exports = {
  AssetMultipart
};