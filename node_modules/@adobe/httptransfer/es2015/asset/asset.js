/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

"use strict";

require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.symbol.async-iterator.js");
require("core-js/modules/es.symbol.match-all.js");
require("core-js/modules/es.aggregate-error.js");
require("core-js/modules/es.array.flat.js");
require("core-js/modules/es.array.flat-map.js");
require("core-js/modules/es.array.includes.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.sort.js");
require("core-js/modules/es.array.unscopables.flat.js");
require("core-js/modules/es.array.unscopables.flat-map.js");
require("core-js/modules/es.global-this.js");
require("core-js/modules/es.json.stringify.js");
require("core-js/modules/es.math.acosh.js");
require("core-js/modules/es.math.hypot.js");
require("core-js/modules/es.object.define-getter.js");
require("core-js/modules/es.object.define-setter.js");
require("core-js/modules/es.object.entries.js");
require("core-js/modules/es.object.from-entries.js");
require("core-js/modules/es.object.get-own-property-descriptors.js");
require("core-js/modules/es.object.lookup-getter.js");
require("core-js/modules/es.object.lookup-setter.js");
require("core-js/modules/es.object.values.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.promise.all-settled.js");
require("core-js/modules/es.promise.any.js");
require("core-js/modules/es.promise.finally.js");
require("core-js/modules/es.reflect.to-string-tag.js");
require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.regexp.flags.js");
require("core-js/modules/es.string.match-all.js");
require("core-js/modules/es.string.pad-end.js");
require("core-js/modules/es.string.pad-start.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.string.replace-all.js");
require("core-js/modules/es.string.split.js");
require("core-js/modules/es.string.trim.js");
require("core-js/modules/es.string.trim-end.js");
require("core-js/modules/es.string.trim-start.js");
require("core-js/modules/es.typed-array.float32-array.js");
require("core-js/modules/es.typed-array.float64-array.js");
require("core-js/modules/es.typed-array.int8-array.js");
require("core-js/modules/es.typed-array.int16-array.js");
require("core-js/modules/es.typed-array.int32-array.js");
require("core-js/modules/es.typed-array.uint8-array.js");
require("core-js/modules/es.typed-array.uint8-clamped-array.js");
require("core-js/modules/es.typed-array.uint16-array.js");
require("core-js/modules/es.typed-array.uint32-array.js");
require("core-js/modules/es.typed-array.fill.js");
require("core-js/modules/es.typed-array.from.js");
require("core-js/modules/es.typed-array.of.js");
require("core-js/modules/es.typed-array.set.js");
require("core-js/modules/es.typed-array.sort.js");
require("core-js/modules/web.queue-microtask.js");
require("core-js/modules/web.url.js");
require("core-js/modules/web.url.to-json.js");
require("core-js/modules/web.url-search-params.js");
const {
  basename: filePathBasename
} = require("path");
const {
  urlPathDirname
} = require("../util");
const PRIVATE = Symbol("PRIVATE");

/**
 * @typedef {Object} Headers
 */
/**
 * Describes a source or target asset
 */
class Asset {
  /**
   * Construct a source or target asset
   * 
   * @param {URL|String|Blob} url URL of the asset (http, https, or file), can also be a Blob for browser uploads
   * @param {Headers} [headers] Headers to send to request or store the asset 
   * @param {Headers} [multipartHeaders] Headers to send with each part request
   */
  constructor(url, headers, multipartHeaders) {
    if (typeof url === "string" || url instanceof URL) {
      this[PRIVATE] = {
        url: new URL(url),
        headers,
        multipartHeaders
      };
    } else {
      this[PRIVATE] = {
        url: "blob://",
        blob: url,
        headers,
        multipartHeaders
      };
    }
  }

  /**
   * Folder URL of the asset
   * 
   * @returns {URL} Folder URL
   */
  get folderUrl() {
    return new URL(urlPathDirname(this.url.pathname), this.url);
  }

  /**
   * Filename without path
   * 
   * @returns {String} Asset filename without path
   */
  get filename() {
    return decodeURIComponent(filePathBasename(this.url.pathname));
  }

  /**
   * Asset URL (http, https, file)
   * 
   * Will return a blob:// reference if the asset is a file selected in a browser.
   * 
   * @returns {URL} Asset URL (http, https, file)
   */
  get url() {
    return this[PRIVATE].url;
  }

  /**
   * Asset Blob for browser based uploads
   * 
   * @returns {Blob} Asset Blob
   */
  get blob() {
    return this[PRIVATE].blob;
  }

  /**
   * Headers to send to request or store the asset 
   * 
   * @returns {Headers} Headers to send to request or store the asset 
   */
  get headers() {
    return this[PRIVATE].headers;
  }

  /**
   * Headers to send with each part request transfering in multipart.
   * 
   * @returns {Headers} Headers to send to request or store the asset 
   */
  get multipartHeaders() {
    return this[PRIVATE].multipartHeaders;
  }
}
module.exports = {
  Asset
};